AQUACULTURE_REGIONS = {
    "Qu·∫£ng Ninh": {
        "lat": 21.0,
        "lon": 107.0,
        "city": "H·∫° Long",
        "main_species": ["Tu h√†i", "Ngao", "H√†u", "C√° song (c√° m√∫)", "T√¥m s√∫", "T√¥m th·∫ª ch√¢n tr·∫Øng", "Rong bi·ªÉn"],
        "description": "V√πng bi·ªÉn C√¥ T√¥, V√¢n ƒê·ªìn n·ªïi ti·∫øng v·ªõi nu√¥i l·ªìng b√®, v√† c√°c ƒë·∫ßm nu√¥i n∆∞·ªõc l·ª£ ven bi·ªÉn.",
        "icon": "ü¶™",
        "color": "#FF6B6B",
        "temp_range": {"min": 18, "max": 32, "optimal": "22-28¬∞C"},
        "salinity": "15-35‚Ä∞",
        "special_warnings": {
            "cold": "Nhi·ªát ƒë·ªô <18¬∞C: Nguy hi·ªÉm cho tu h√†i v√† h√†u. C·∫ßn che ph·ªß l·ªìng b√®.",
            "hot": "Nhi·ªát ƒë·ªô >32¬∞C: TƒÉng c∆∞·ªùng s·ª•c kh√≠, thay n∆∞·ªõc cho ao nu√¥i t√¥m.",
            "rain": "M∆∞a l·ªõn: Ki·ªÉm tra ƒë·ªô m·∫∑n, tr√°nh n∆∞·ªõc ng·ªçt pha lo√£ng qu√° m·ª©c."
        }
    },
    "Ti·ªÅn H·∫£i (Th√°i B√¨nh)": {
        "lat": 20.5,
        "lon": 106.5,
        "city": "Ti·ªÅn H·∫£i",
        "main_species": ["Ngao (ngh√™u)", "V·∫πm", "C√° b·ªëng b·ªõp", "T√¥m s√∫", "T√¥m th·∫ª ch√¢n tr·∫Øng", "R∆∞∆°i"],
        "description": "ƒê·∫∑c bi·ªát c√≥ c√°c v√πng nu√¥i ngao ven bi·ªÉn quy m√¥ l·ªõn.",
        "icon": "ü¶ê",
        "color": "#4ECDC4",
        "temp_range": {"min": 16, "max": 30, "optimal": "20-26¬∞C"},
        "salinity": "10-25‚Ä∞",
        "special_warnings": {
            "cold": "Nhi·ªát ƒë·ªô <16¬∞C: Nguy hi·ªÉm cho ngao v√† t√¥m. TƒÉng ƒë·ªô s√¢u ao nu√¥i.",
            "hot": "Nhi·ªát ƒë·ªô >30¬∞C: Gi·∫£m m·∫≠t ƒë·ªô nu√¥i, tƒÉng c∆∞·ªùng th√¥ng gi√≥.",
            "rain": "M∆∞a l·ªõn: ƒê·∫∑c bi·ªát nguy hi·ªÉm cho nu√¥i r∆∞∆°i, c·∫ßn ki·ªÉm tra pH."
        }
    },
    "Ki·∫øn Th·ª•y (H·∫£i Ph√≤ng)": {
        "lat": 20.5,
        "lon": 106.5,
        "city": "Ki·∫øn Th·ª•y",
        "main_species": ["T√¥m s√∫", "C√° v∆∞·ª£c", "C√° r√¥ phi", "Ngao", "T√¥m th·∫ª ch√¢n tr·∫Øng"],
        "description": "M·ªôt s·ªë v√πng k·∫øt h·ª£p m√¥ h√¨nh l√∫a - c√°, ho·∫∑c nu√¥i sinh th√°i (h·ªØu c∆°).",
        "icon": "üêü",
        "color": "#45B7D1",
        "temp_range": {"min": 18, "max": 30, "optimal": "22-28¬∞C"},
        "salinity": "5-20‚Ä∞",
        "special_warnings": {
            "cold": "Nhi·ªát ƒë·ªô <18¬∞C: ·∫¢nh h∆∞·ªüng ƒë·∫øn c√° r√¥ phi v√† t√¥m. C·∫ßn bi·ªán ph√°p gi·ªØ ·∫•m.",
            "hot": "Nhi·ªát ƒë·ªô >30¬∞C: TƒÉng c∆∞·ªùng s·ª•c kh√≠ cho ao c√°, gi·∫£m l∆∞·ª£ng th·ª©c ƒÉn.",
            "rain": "M∆∞a l·ªõn: Ki·ªÉm tra h·ªá th·ªëng tho√°t n∆∞·ªõc, tr√°nh ng·∫≠p √∫ng ao nu√¥i."
        }
    }
}

import numpy as np

def get_weather_warnings_for_region(region_name, weather_data):
    """Generate specific weather warnings for aquaculture region"""
    region = AQUACULTURE_REGIONS[region_name]
    warnings = []
    if not weather_data.empty:
        # Temperature warnings
        if 't2m' in weather_data.columns:
            min_temp = weather_data['t2m'].min()
            max_temp = weather_data['t2m'].max()
            if min_temp < region["temp_range"]["min"]:
                warnings.append({
                    "type": "danger",
                    "title": "üå°Ô∏è C·∫£nh b√°o nhi·ªát ƒë·ªô th·∫•p",
                    "message": region["special_warnings"]["cold"]
                })
            elif max_temp > region["temp_range"]["max"]:
                warnings.append({
                    "type": "warning", 
                    "title": "üå°Ô∏è C·∫£nh b√°o nhi·ªát ƒë·ªô cao",
                    "message": region["special_warnings"]["hot"]
                })
            else:
                warnings.append({
                    "type": "success",
                    "title": "üå°Ô∏è Nhi·ªát ƒë·ªô ph√π h·ª£p",
                    "message": f"Nhi·ªát ƒë·ªô trong kho·∫£ng t·ªëi ∆∞u {region['temp_range']['optimal']} cho {', '.join(region['main_species'][:3])}."
                })
        # Precipitation warnings
        if 'tp' in weather_data.columns:
            total_precip = weather_data['tp'].sum() * 1000
            if total_precip > 100:
                warnings.append({
                    "type": "danger",
                    "title": "üåßÔ∏è C·∫£nh b√°o m∆∞a l·ªõn",
                    "message": region["special_warnings"]["rain"]
                })
            elif total_precip > 50:
                warnings.append({
                    "type": "warning",
                    "title": "üåßÔ∏è C·∫£nh b√°o m∆∞a v·ª´a",
                    "message": "Theo d√µi ƒë·ªô m·∫∑n v√† pH. TƒÉng c∆∞·ªùng s·ª•c kh√≠."
                })
        # Wind warnings
        if 'u10' in weather_data.columns and 'v10' in weather_data.columns:
            wind_speeds = np.sqrt(weather_data['u10']**2 + weather_data['v10']**2)
            max_wind = wind_speeds.max()
            if max_wind > 15:
                warnings.append({
                    "type": "danger",
                    "title": "üí® C·∫£nh b√°o gi√≥ m·∫°nh",
                    "message": "C·ªë ƒë·ªãnh l·ªìng b√®, ng·ª´ng cho ƒÉn, ki·ªÉm tra thi·∫øt b·ªã neo ƒë·∫≠u."
                })
            elif max_wind > 10:
                warnings.append({
                    "type": "warning",
                    "title": "üí® C·∫£nh b√°o gi√≥ v·ª´a",
                    "message": "Ki·ªÉm tra h·ªá th·ªëng neo ƒë·∫≠u, gi·∫£m ho·∫°t ƒë·ªông tr√™n bi·ªÉn."
                })
    return warnings 